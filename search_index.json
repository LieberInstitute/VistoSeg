[["index.html", "VisiumLIBD: Visium Image Processing Pipeline Overview Why spatial transcriptomics or visium imaging?? Cite VisiumLIBD Image Acquisition Software Requirements Data Availability", " VisiumLIBD: Visium Image Processing Pipeline Madhavi Tippani Lieber Institute for Brain Development, Johns Hopkins Medical Campusmadhavi.tippani@libd.org Overview Visium imaging is a part of whole spatial transcriptomics workflow, a barcoding-based transcriptome-wide technology released by 10X genomics. Why spatial transcriptomics or visium imaging?? Methods like RNAseq can profile single cells transcriptome-wide and enable researchers to identify cell type compositions but can necessarily destroy the spatial information. Multiplexing methods on other hand can provide spatial information but has significant limitations on the number of genes that can be processed and has issues with microscopy and related computational challenges. Spatial transcriptomics provides solutions to these limitations allowing us to quantify gene expression with high spatial resolution. The key to this system is the visium imaging and visium gene expression slide, where the tissue sections from subjects goes onto the capture areas (A1,B1,C1,D1) on the slide. The whole slide is imaged at once and produces a huge output image file with all capture areas. The whole slide image has to be split into individual capture area images (necessarily JPEG or tif) and processed accordingly for the downstream analysis. This website describes the steps required to split, visualize and process the visium images from spatial transcriptomics projects generated by the 10x Genomics Visium commercial platform. The above figure describes the VisiumLIBD pipeline, (A) The data presented here is from a portion of DLPFC (taken from posterior, mid and anterior sections of brain per sample) that spans six neuronal layers plus white matter. (B) Shows the original ‘Visium gene expression slide’ with 4 capture areas and the slide scanner used to image the slide. (C) Shows the huge tif file produced by the slide scanner which is then split into the respective capture areas using the function splitSlide described in Step 1 (D) Shows the individual tif images of capture areas produced by splitSlide and its corresponding nuclei segmentations produced by the functions VNS (Visium Nuclei Segmentation) and refineVNS explained in Step 2 (E) The tif images from ‘(D)’ serve as input to the Spaceranger module (explained in Step 3) which generates tissue_positions_list.csv file and scalefactors_json.json file that contain ‘Visium spot metrics’ (F) The function countNuclei explained in Step 4, gives the nuclei count per visium spot info that is stored in tissue_spot_counts.csv file (G) Finally, the pipeline provides a GUI called spotspotcheck that allows the user to perform visual inspection of the nuclei segmentations by allowing the user to toggle between the visium and binary images, and also by providing zoom in/out options to clearly see the nuclei inside a visium spot. Cite VisiumLIBD We hope that VisiumLIBD will be useful for your research. Please use the following information to cite the package and the overall approach. Thank you! @article {, author = {Tippani, Madhavi and other names to include}, title = {VisiumLIBD: a semiautomated MATLAB pipeline for visualizing and processing high resolution visium images whose output is used for downstream spatial transcriptomics analyis}, elocation-id = {}, year = {2021}, doi = {}, publisher = {Oxford Bioinformatics}, abstract = {}, URL = {https://www.overleaf.com/read/fmvrpsyxgsbz}, eprint = {https://www.overleaf.com/read/fmvrpsyxgsbz}, journal = {bioRxiv} } Project lead: Imaging Development Team from Keri Martinowich’s Lab at the Lieber Institute for Brain Development. Image Acquisition The 10X Visium Spatial Gene Expression Imaging Guidelines are followed for acquiring the images. Images are acquired at 40x magnification using a Leica CS2 slide scanner and saved as ‘.SVS files.’ These ‘.SVS files’ are then exported as ‘TIF files’ for downstream analysis. The entire Visium slide (4 capture areas with fiducial frames), is scanned in a single file (~20GB). Software Requirements The pipeline was developed under the following software configuration. VisiumLIBD has been tested on Linux, Windows and MacOS. MATLAB MATLAB version R2019a 64-bit or later is required to run VisiumLIBD pipeline with the Image Processing Toolbox preloaded. Memory Visium whole slide images are high resolution, and the typical size of these multiplane tif images produced inhouse is ~25GB. The system RAM (we use ~75GB) should be thrice the size of the multiplane tif image to load it into MATLAB and split them into individual capture areas. Rest of the processing, on individual capture tifs can be performed on system with as little as 16GB of RAM. Installation The pipeline is availble at (https://github.com/LieberInstitute/VisiumLIBD) which can be download to your system from the Github website directly or the main repository can be cloned to your system using the following command on terminal/command prompt. git clone https://github.com/LieberInstitute/VisiumLIBD.git All the code exists in the code directory inside the main VisiumLIBD directory. The user’s working directory on MATLAB should be the path to the code directory in the downloaded repository, to run any functions this pipeline provides. Once the repository is downloaded, the user can run either of the following code to change his/her working directory on MATLAB to the code directory. cd /path_to_the_downloaded_repository/VisiumLIBD/code/ addpath(genpath('/path_to_the_downloaded_repository/VisiumLIBD/code/')) Data Availability The raw Visium Tiff file is available at the following link (https://visium-libd.s3.amazonaws.com/Lieber_Institute_OTS-20-7690_rush_anterior.tif). Other potential datasets 1. LIBD pilot DLPFC 2. 10x Genomics spatial data sets "],["step-1-split-visium-histology-whole-slide-image-into-individual-capture-area-images.html", "1 Step 1: Split Visium histology whole slide image into individual capture area images", " 1 Step 1: Split Visium histology whole slide image into individual capture area images The visium histology whole slide image from the imaging system (slide scanner) is a multiplane tif image (~20GB). The sample image Lieber_Institute_OTS-20-7690_rush_anterior.tif from the DLPFC dataset is used here to run through the pipeline. The inputs to the function splitSlide.m are the full path with file name of the raw multiplane tif image (obtained from slide scanner) The function imports the raw multiplane tif image and saves each plane/image as MATLAB structure and all structures are saved into a single cell array (I) in a ‘.mat file’. The 1st image of the raw multiplane tif is the raw visium histology slide image, the remaining planes/images consists of the metadata. The function then splits the 1st image of the multiplane tif into individual capture areas (A1,B1,C1,D1) and saves them as both tif images and mat files. The capture areas are resized to 70% of the original size (eg 100 X 100 Pixel region is resized to 70 X 70 pixel region) when saving to tif images as MATLAB cannot store images that occupies more than 2^32 - 1 bytes of data. &gt;&gt; fname = &#39;/path_to_multiplane_tif/Lieber_Institute_OTS-20-7690_rush_anterior.tif&#39;; &gt;&gt; splitSlide(fname) The multiplane tif has 7 images Starting parallel pool (parpool) using the &#39;local&#39; profile ... Imported image 7 of the multiplane tif Elapsed time is 0.066238 seconds. Imported image 6 of the multiplane tif Elapsed time is 0.031950 seconds. Imported image 5 of the multiplane tif Elapsed time is 0.113162 seconds. Imported image 4 of the multiplane tif Elapsed time is 0.652994 seconds. Imported image 3 of the multiplane tif Elapsed time is 10.672578 seconds. Imported image 2 of the multiplane tif Elapsed time is 0.009990 seconds. Imported image 1 of the multiplane tif Elapsed time is 169.230220 seconds. Saving the multiplane tif to mat file Elapsed time is 1071.624948 seconds. Splitting whole slide into individual capture areas Elapsed time is 1672.725408 seconds. The 7 images of the multiplane tif are shown below. Though most of the images look same, the first image in the multiplane tif is the high resolution image of the slide based on the image size (y,x,z) in pixels shown below in MATLAB. load(&#39;/path_to_multiplane_tif/Lieber_Institute_OTS-20-7748_rush_posterior.mat&#39;) size(I,2) %number of images in the multiplane tif size(I{1}.image) ans = 53384 160858 3 size(I{2}.image) ans = 339 1024 3 size(I{3}.image) ans = 13346 40214 3 size(I{4}.image) ans = 3336 10053 3 size(I{5}.image) ans = 834 2513 3 size(I{6}.image) ans = 777 765 3 size(I{7}.image) ans = 612 1600 3 The image ‘I{1}.image’ is split into 4 sub images or capture areas by dividing the x(160858) dimesion into 4 equal parts. Sometimes the center of the image is not the center of the slide, in such case the offset is adjusted manually. Below are the output files of slpitSlide function Lieber_Institute_OTS-20-7690_rush_anterior.mat - cell array of multiplane tif stored in mat file. Lieber_Institute_OTS-20-7690_rush_anterior_A1.tif - tif image of compressed capture area A1. Lieber_Institute_OTS-20-7690_rush_anterior_A1.mat - RGB matrix of uncompressed capture area A1 stored in mat file. Lieber_Institute_OTS-20-7690_rush_anterior_B1.tif - tif image of compressed capture area B1. Lieber_Institute_OTS-20-7690_rush_anterior_B1.mat - RGB matrix of uncompressed capture area B1 stored in mat file. Lieber_Institute_OTS-20-7690_rush_anterior_C1.tif - tif image of compressed capture area C1. Lieber_Institute_OTS-20-7690_rush_anterior_C1.mat - RGB matrix of uncompressed capture area C1 stored in mat file. Lieber_Institute_OTS-20-7690_rush_anterior_D1.tif - tif image of compressed capture area D1. Lieber_Institute_OTS-20-7690_rush_anterior_D1.mat - RGB matrix of uncompressed capture area D1 stored in mat file. "],["step-2-nuclei-segmentation-of-individual-capture-areas-images.html", "2 Step 2: Nuclei segmentation of individual capture areas images 2.1 VNS - Visium Nuclei Segmentation 2.2 refineVNS", " 2 Step 2: Nuclei segmentation of individual capture areas images The functions VNS(Visium Nuclei Segmentation) and refineVNS from the pipeline are used to perform nuclei segmentation. 2.1 VNS - Visium Nuclei Segmentation The inputs to the VNS function are The tif image of single capture area (output from Step 1: splitSlide function) with full path number of colors a user visually identifies in the single capture area image The VNS function imports the capture area image, applies smoothening to it to get rid of any irregularities in the image and increases the contrast to brighten the nuclei for better detection. This function is based on Color-Based Segmentation Using K-Means Clustering. The smoothened and brightened image is converted from RGB (Red, Green, Blue) color space to CIELAB color space also called L*a*b color space (L - Luminosity layer measures lightness from black to white, a - chromaticity-layer measures color along red-green axis, b - chromaticity-layer measures color along blue-yellow axis). The CIELAB color space quantifies the visual differences caused by the different colors in the image. The a*b color space is extracted from the L*a*b converted image and is given to the K-means clustering along with the number of colors the user visually identifies in the image. The VNS function partitions the image into n (number provided by user, 5 for the sample used here) color clusters and saves them as individual objects with a index/label. The color clusters (cell array in matfile), the indexed objects (cell array in matfile) of the color clusters, images of the color clusters (tif) are all saved in the same location as the capture area tif image. fname = &#39;/path_to_capture_area_tif/Lieber_Institute_OTS-20-7690_rush_anterior_A1.tif&#39;; N = 5; % with some trial and error 5 (white,pink,dark pink,cream,blue) colors seem a good prediction for the images produced in-house VNS(fname,N) Importing capture area Elapsed time is 15.122372 seconds. Performing smoothening and contrast adjustment Elapsed time is 38.787139 seconds. Performing rgb to Lab color space conversion Elapsed time is 65.705037 seconds. Applying Kmeans Elapsed time is 494.626476 seconds. saving outputs Starting parallel pool (parallel) using the &#39;local&#39; profile . . . Elapsed time is 469.198175 seconds. Below is the sample capture area and its associated indexed object and the labels given to these objects. The 5 color clusters and the corresponding indexed objects (with labels 1,2,3,4,5) of a section (shown in red square in the above capture area) of the sample image are shown below. The pixels assigned to that specific color cluster shows up in its original color on left and the indexed object of the same pixels show up in gray scale respective to its label on right. The unassigned pixels in both color cluster and indexed object in that section are shown in green. Below are the outputs of VNS function Lieber_Institute_OTS-20-7690_rush_anterior_A1_cluster1.tif Lieber_Institute_OTS-20-7690_rush_anterior_A1_cluster2.tif Lieber_Institute_OTS-20-7690_rush_anterior_A1_cluster3.tif Lieber_Institute_OTS-20-7690_rush_anterior_A1_cluster4.tif Lieber_Institute_OTS-20-7690_rush_anterior_A1_cluster5.tif Lieber_Institute_OTS-20-7690_rush_anterior_A1_cluster.mat Lieber_Institute_OTS-20-7690_rush_anterior_A1_mask.mat 2.2 refineVNS This function is used to refine the segmentations for accurate detection of nuclei. The inputs to the function are The tif image of a single capture area with full path The index of the color cluster of the nuclei (obtained from VNS function) fname = &#39;/path_to_capture_area_tif/Lieber_Institute_OTS-20-7690_rush_anterior_A1.tif&#39;; M = 3; %index label 3 was assigned to nuclei for this sample image (shown above) refineVNS(fname, M) loading data Elapsed time is 20.240616 seconds. refining segmentations Elapsed time is 118.457338 seconds. saving final segmentations Elapsed time is 6.196110 seconds. The nuclei in these images are dark blue objects, the function get rids of the noisy light blue pixels around the nuclei by thresholding the brightness layer (the L object in the Lab image) of the image. The function provdies a binary mask of the refined nuclei saved in mat file and a tif image of the segmented and refined nuclei. The color cluster of the above section, before and after refining is shown below. A zoomed in version, basically the 1st 500 pixels in x ang y of the above section is shown here for better visualization. Below are the outputs of the refineVNS function Lieber_Institute_OTS-20-7690_rush_anterior_A1_nuclei.tif Lieber_Institute_OTS-20-7690_rush_anterior_A1_nuclei.mat "],["step-3-space-ranger.html", "3 Step 3: Space Ranger What is Space Ranger?", " 3 Step 3: Space Ranger What is Space Ranger? Space Ranger is a set of analysis pipelines that process Visium Spatial Gene Expression data with brightfield and fluorescence microscope images. The following links and the flowchart provide useful information about spaceranger and how to run it on histology images. Blog post on running spaceranger on JHPCE, Website describing the details (https://support.10xgenomics.com/spatial-gene-expression/software/pipelines/latest/what-is-space-ranger) Installation: https://support.10xgenomics.com/spatial-gene-expression/software/pipelines/latest/installation Useful links: https://docs.google.com/presentation/d/1xw5A0fkJVBZ66lYV87hZg9JFOOZcfVyibsam1kivrqM/edit#slide=id.g9fa4604752_0_29 The output files scalefactors_json.json and tissue_positions_list.csv generated by the spaceranger count module are required for the next image processing steps. These files provide the visium spot dimensions, spot locations and barcode IDs to reconstruct thr spot grid and lay over the histology image for visual inspection. The individual split images from Step 1 go through the 10X Loupe browser for manual alignment of the fiducial frame and tissue detection. The output from Loupe Browser along with the split images, their fastqs, slide number, capture etc all go into spaceranger which finally provides the visium spot metrics. This entire process is shown in a brief flowchart below. "],["step-4-gui-to-count-nuclei-in-a-visium-spot.html", "4 Step 4: GUI to count nuclei in a visium spot 4.1 spotspotcheck 4.2 countNuclei", " 4 Step 4: GUI to count nuclei in a visium spot 4.1 spotspotcheck The GUI is used for 1. Obtaining nuclei count per Visium spot and saving it to a csv. 2. Performing quality check on the nuclei segmentations (from Step2) by allowing the user to zoom in/out and toggle between the nuclei segmentation and visium histology images. The GUI overlays the spot grid on to the visium histology and segmentation images for the user to clearly see the nuclei inside a spot. 3. It allows the user to search for a spot with its associated barcode ID. To open the GUI, the spotspotcheck function should be executed in the MATLAB command prompt like below. spotspotcheck loading..... Start Window : A start window opens up like below. If you donot have the tissue_spots_counts.csv already, generated from the command line function countNuclei, the option to Get Cell Counts on the window should be checked. Then you hit the Start button which opens up the following window. Select Histology Image : This window asks you to select the capture area tif that you want the nuclei counts for or to perform quality check on nuclei segmentations. Select the capture area tif and hit the Open button on window, which opens the following window. Select Segmented Mat File : This wondow asks for the final segmented .mat file of the nuclei segmentations. Select the .mat file and hit the Open button. Select Scale Factors JSON File : Select the scalefactors_json.json file with the visium spot metrics obtained from the Space Ranger software. Select Tissue Positions/Spot Counts File : If the Get Cell Counts option is checked in the Start window then select tissue_positions_list.csv obtained from Spaceranger, otherwise select tissue_spot_counts.csv obtained from countNuclei function. spotspotcheck GUI opens up, shown below By clicking anywhere on the image inside the GUI, the user can toggle between the Histology and segmented image, shown below. The zoom in (symbol of magnifying glass with +) option is provided in the menubar at the top of the GUI (Note the position of this option on the GUI may change depending on the version of MATLAB being used, but it is always represented by the + symbol). Selecting/clicking this option opens a cursor with + symbol, which lets the user select a rectangular region of interest to zoom in to, like the image below. The Zoom Out button at the bottom of GUI is used for the images to return to their original size on GUI. To toggle between histology/segmented images when zoomed in, the cursor should should return to its normal function by unclicking the zoom in (symbol of magnifying glass with +) option. The dialog box at the bottom of the GUI with the label Barcode Lookup provides user to input the barcode ID of the specific visium spot the user want to look at. For example if we want to look at the 1st visium spot on this image, paste the barcode ID of the spot (from tissue_spot_counts.csv) into the white space and hit the Lookup button. It opens up the image where ever this spot is located. 4.2 countNuclei This function can be run on MATLAB command prompt to obtain the tissue_spot_counts.csv file without going through the GUI. Inputs to the function are 1. Filename with full path for the mat file of the final nuclei segmentation. 2. Filename with full path for the scalefactors_json json file. 3. Filename with full path for the tissue_positions_list csv file. mask = &#39;/path_to_capture_area_segmentation/Lieber_Institute_OTS-20-7690_rush_anterior_A1_nuclei.mat&#39;; jsonname = &#39;/path_to_scalefactors_json/scalefactors_json.json&#39;; posname = &#39;/path_to_tissue_positions_list/tissue_positions_list.csv&#39;; countNuclei(mask,jsonname,posname) loading data Elapsed time is 4.216505 seconds. 84385 cells detected 4992 spots detected counting nuclei per spot 100 spots finished in time 77.1357s 200 spots finished in time 140.8369s 300 spots finished in time 204.5829s 400 spots finished in time 267.4467s . . . The countNuclei function generates a nuclei count file listed below. The file is saved in the same path as the tissue_positions_list.csv that we give to the function. 1. tissue_spot_counts.csv "],["step-5-test-data-and-future-directions.html", "5 Step 5: Test data and Future directions 5.1 Public datasets 5.2 Future directions", " 5 Step 5: Test data and Future directions 5.1 Public datasets The pipeline with default settings (smoothening and color clusters of k-means in VNS function) used for in house data has been applied on the public datasets provided by 10x Genomics. We chose 2 images one from breast tissue with high density of cells and the other from human heart tissue with low density of cells, to demonstrate the utility of the pipeline on images obtained from different tissues. Decent segmentation results were obtained with the default settings given the low the image resolution. Accurate results can be obtained with little parametric tuning. A zoom in versions from spotspotcheck are shown below for better visualization. A. Heart Tissue code = &#39;/path to the code/VisiumLIBD/code&#39;; addpath(genpath(code)) fname = &#39;/path to the file/V1_Human_Heart_image.tif&#39;; N = 5; VNS(fname,N) Importing capture area Elapsed time is 12.898534 seconds. Performing smoothening and contrast adjustment Elapsed time is 15.198035 seconds. Performing rgb to Lab color space conversion Elapsed time is 17.632075 seconds. Applying Kmeans Elapsed time is 277.069572 seconds. saving outputs Starting parallel pool (parpool) using the &#39;local&#39; profile ... Connected to the parallel pool (number of workers: 2). Elapsed time is 161.220875 seconds. spotspotcheck loading..... 93741 cells detected 4992 spots detected counting nuclei per spot 100 spots finished in time 32.3861s 200 spots finished in time 61.5043s 300 spots finished in time 98.5936s 400 spots finished in time 141.2028s 500 spots finished in time 182.9503s 600 spots finished in time 222.0649s 700 spots finished in time 263.1166s 800 spots finished in time 303.7525s 900 spots finished in time 343.7924s . . . 1.Output from spotspotcheck tissue_spot_counts.csv 2.Final nuclei segmentations: nuclei.tif, nuclei.mat B. Breast Tissue code = &#39;/path to the code/VisiumLIBD/code&#39;; addpath(genpath(code)) fname = &#39;/path to the file/V1_Human_Heart_image.tif&#39;; N = 5; VNS(fname,N) Importing capture area Elapsed time is 53.908634 seconds. Performing smoothening and contrast adjustment Elapsed time is 150.770066 seconds. Performing rgb to Lab color space conversion Elapsed time is 68.303547 seconds. 5.2 Future directions To integrate Atlas Aligner for brain region identification To integrate VAMPIRE for cell morphology detection "],["r-session-information.html", "R session information", " R session information Details on the R version used for making this book. The source code is available at LieberInstitute/VisiumLIBD. ## Load the package at the top of your script library(&quot;sessioninfo&quot;) ## Reproducibility information options(width = 120) session_info() ## ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────── ## setting value ## version R version 4.0.3 (2020-10-10) ## os Ubuntu 20.04 LTS ## system x86_64, linux-gnu ## ui X11 ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Etc/UTC ## date 2021-07-13 ## ## ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────── ## package * version date lib source ## assertthat 0.2.1 2019-03-21 [2] RSPM (R 4.0.3) ## bookdown 0.21 2020-10-13 [1] RSPM (R 4.0.2) ## cli 2.3.0 2021-01-31 [2] RSPM (R 4.0.3) ## digest 0.6.27 2020-10-24 [2] RSPM (R 4.0.3) ## evaluate 0.14 2019-05-28 [2] RSPM (R 4.0.3) ## glue 1.4.2 2020-08-27 [2] RSPM (R 4.0.3) ## htmltools 0.5.1.1 2021-01-22 [2] RSPM (R 4.0.3) ## knitr 1.31 2021-01-27 [2] RSPM (R 4.0.3) ## magrittr 2.0.1 2020-11-17 [2] RSPM (R 4.0.3) ## rlang 0.4.10 2020-12-30 [2] RSPM (R 4.0.3) ## rmarkdown 2.6 2020-12-14 [1] RSPM (R 4.0.3) ## rstudioapi 0.13 2020-11-12 [2] RSPM (R 4.0.3) ## sessioninfo * 1.1.1 2018-11-05 [1] RSPM (R 4.0.3) ## stringi 1.5.3 2020-09-09 [2] RSPM (R 4.0.3) ## stringr 1.4.0 2019-02-10 [2] RSPM (R 4.0.3) ## withr 2.4.1 2021-01-26 [2] RSPM (R 4.0.3) ## xfun 0.21 2021-02-10 [2] RSPM (R 4.0.3) ## yaml 2.2.1 2020-02-01 [2] RSPM (R 4.0.3) ## ## [1] /__w/_temp/Library ## [2] /usr/local/lib/R/site-library ## [3] /usr/local/lib/R/library proc.time() ## user system elapsed ## 0.848 0.139 0.900 This book was last updated at 2021-07-13 16:07:34. "]]
